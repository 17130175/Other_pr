# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WG1SwRSxYE-9cGKzH2MZNoJC_InarpnG
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import re
from mpl_toolkits.mplot3d import Axes3D
from math import cos, sin
import time, datetime
import math
# %matplotlib inline

lidar_data = pd.read_csv('lidar_data.csv', sep=';')
lidar_data = lidar_data.drop('Column6', axis=1).drop('Column3', axis=1)
groups = lidar_data.groupby('Column4')
lists = groups.apply(lambda x: x.values.tolist())
gps_data = pd.read_csv('gps_data.csv', sep=';')
gps_data =  gps_data.drop('Column1', axis=1).drop('Column2', axis=1)
lists = lists.to_frame(name="lidar_data")
df_merged = pd.merge(
    lists, gps_data,
    left_on='Column4',
    right_on='Column3'
)
df_merged['Column11'] = df_merged['Column11'].str.strip('N,')
df_merged['Column13'] = df_merged['Column13'].str.strip('E')
df_merged['Column9'] = df_merged['Column9'].str.strip(',')
points = list(zip(df_merged['Column11'], df_merged['Column13'], df_merged['Column9']))
data = df_merged['lidar_data']
X, Y = [], []
Z, Z_1 = [], []
for point in points:
    X.append(float(point[0]))
    Y.append(float(point[1]))
    Z.append(0)
    Z_1.append(float(point[2]))
for i in range(len(data)):
  for j in range(len(data[i])):
      del data[i][j][2:]
'''
plt.scatter(X, Y, s=10, marker='o', color='red')
plt.show()

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X, Y, Z, c='r', s= 0.1)
plt.show()'''

def polar_to_cartesian(x1,y1,z1,r, theta, phi):
    x = x1+ distance 
    y = y1+ distance 
    z = z1+ distance * sin(theta)
    return (x, y, z)

x_n, y_n, z_n = [], [], []
for i in range(len(data)):
  x1, y1, z1 = X[i], Y[i], 0
  for j in range(len(data[i])):
    distance = -float(data[i][j][1])
    theta = float(data[i][j][0]) + 11
    phi = 270
    x2, y2, z2 = polar_to_cartesian(float(x1), float(y1), float(z1), distance, theta, phi)
    x_n.append(x2)
    y_n.append(y2)
    z_n.append(z2)

'''fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X, Y, Z, color='r', s=0.1)
ax.scatter(x_n, y_n, z_n, color='b', s=0.1)
plt.show()'''
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
#ax.scatter(X, Y, Z_1, color='r', s=0.1)
ax.scatter(x_n, y_n, z_n, color='b', s=0.1)
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
plt.show()
